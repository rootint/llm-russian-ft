A product that doesn't work with lots of features is infinitely worse than a product with one feature that works. And again, like people- Let's play that out. Let's play that out, right? Imagine if it's like, they were like, you get healthcare and you get benefits and you get 401k and payroll and none of those features work. And sometimes we lose the money. Yes. Like you would hate them. You would hate them. That sounds like Verizon or something, you know? Exactly. Hey, this is Michael Seibel with Dalton Caldwell and welcome to Rookie Mistakes. We asked YC founders for their rookie mistakes so we could share them with you and help you avoid them. Here's the first mistake that was written in. In my company, we tried to accommodate more than one use case in our product before nailing a single use case and proving out that they even exist a business serving that customer. Yeah, this is super common. It's definitely a problem. We call this boiling the ocean, right? It's you're trying to do something that's basically impossible or intractable and all of your instincts are to build a complete fully formed product without getting a single user. In your mind, you have this elaborate plan and so your plan to start the elaborate plan is to build it all at once before getting a single user. I think that every founder starts their company with the lie in their head that they know about what their customer wants and they know how to solve the problem. And the more you build before putting your product in front of a user, the more you just let that lie go wild. Whereas as soon as you get something in front of a user, you can actually learn how many of my hypotheses were correct and how much of this stuff was just the lie that got me started doing my company. A useful lie, but maybe not the best lie if you wanna solve your user's problem. I also think there's a little bit of, I'll invent a term, Google-itis. Like people looking at companies that they use today and not understanding what they looked like at the beginning. Yeah, they're copying a current product. You're like, oh, we're the next Amazon, so we're gonna build everything Amazon has. And not, hey, when Amazon started, it was like a really simple website that just sold books. It didn't do anything else. It didn't even do that that well. It wasn't that good. Fair. Let's talk about some other examples though. You were mentioning that OpenSea is a good example of something that started super simple. Yeah, I mean, look, OpenSea is a company in the zeitgeist. It's really famous. It feels like it came out of nowhere if you're like a normal person, like, wow, OpenSea, what a huge deal. Well, OpenSea was in YC in 2018. And it was a rough start. They changed their idea. They were working on something else to begin with, and they pivoted into OpenSea. And they actually spent something like a year to two years grinding it out with this really simple website that just let you buy and sell NFTs and barely worked. And they shipped tons of features. They shipped like once a day or once a week constantly. They didn't build their own wallet. Like if you use OpenSea today, you'll notice this. You have to use a third party wallet. There's all these other things they didn't build. And by grinding away and being super focused on the simple use case, they got something that people wanted. They got network effects. And then boom, we all woke up one day and this is one of the hottest companies in the world and everyone wants to invest and they're worth billions of dollars. Well, don't forget the two or three years they were grinding away in obscurity just trying to make the dang thing work, doing the simplest thing that had basically no features. The feature was a website to buy an NFT and transfer it to someone else. You know what I'm saying? And it still has a lot of work to do on the basics before they add really complex features. There's a lot more basic work to do on that thing. And so again, the story here is the reason that thing worked is they started simple and they made the simple thing work and now they're adding more complexity to it. And so if someone wanted to like compete with them or make an NFT startup, they should be doing the simple fundamentals first and not try to get feature parody with all these other companies first, you know? I totally agree. I remember when Gusto went through YC because they were actually in my second batch in winter 12. And another example of, if you look at Gusto today, you would say, oh, you can do payroll, you could do benefits, you can see your org chart, you can do 401k. Like it's like this tool chest full of amazing HR tools. When Gusto started, it was a company named Zen Payroll. It did exactly one thing, your payroll. Back then, if you didn't use Zen Payroll, you'd have to call up ADP. And ADP would bring someone to your office for you to sign stuff so that you could run payroll. And then every month you had to call someone on the phone and say, yes, I do wanna run payroll this month. Like that was state of the art. And then Gusto said, we can just do that online. And that's all it's gonna do. And you're gonna love it and you're gonna sign up and you're gonna forget about it because that's what good payroll is, right? You forget about it. And so time and time again- It just needs to work. Like imagine a version of Gusto or Zen Payroll that had a lot of features but constantly didn't pay your employees. Like a broken version, a product that doesn't work with lots of features is infinitely worse than a product with one feature that works. And again- Let's play that out. Let's play that out, right? Imagine if they were like, you get healthcare and you get benefits and you get 401k and payroll and none of those features work. And sometimes we lose the money. Like you would hate them. You would hate them. That sounds like Verizon or something, you know? Exactly. That's a great way to put a hated company is to have a lot of features that don't reliably work. All right, here's the next one that was written by a YC founder. They wrote, we copied another successful business model from an overseas market and wrongly assumed that product market fit was a given. I mean, if the product works in country X, it's gonna work in country Y. We scaled up hiring quickly and burnt a lot of money before we realized that the users we were selling to did not want our product. Oof, this is something that happens so commonly. And what's tricky is that investors often like funding these ideas because they're so simple, right? This is a very simple thesis. If blank works here, it should work there. So oftentimes these companies like get money but then fail after getting money. How have you seen this? I think what we wanna believe as founders, and this applied to me too, is that by getting validation from investors or the press or my friends or employees or winning a startup competition, whatever, that meant it was good. And that that was the validation. Hey, I've got validation. And it's pretty frightening to realize that you can get validation from all those things and it could still not work. And that getting the stamp of approval, like ultimately you're responsible for if the thing works or not. And it's like no one else's problem to make it work other than the founder. You're kinda on your own on this one. And so it's almost like, it's like thinking that if you can pass the driver's license test to get a driver's license, it means you're a good driver. Like I think all of us that have a driver's license know, you can still be a pretty bad, there's a lot of variation in the quality of driving. And lots of people can get into trouble with their driving habits even though you have a driving license. And there's no mechanism unless you get pulled over. Like things have to go bad or you get unlucky for an authority figure to get involved. But for the most part, you can get into all sorts of trouble even though you have a driver's license. That's how I view this, is that you could have your startup license. Hey, I have a website. I got an article, I raised some money. But man, you can really do poorly and no one's gonna stop you. I think this also comes from historical context. Like by that I mean, I still think that most founders are kind of looking back to what's worked in their past. And almost everything that's happened in their past, almost everything they've learned, they didn't have to learn from first principles. They didn't have to observe personally, right? You learn physics from a physics teacher. And so I think what's so tricky is what we're basically saying is that like all of the ways that you learned in the past don't work here. You actually have to go observe the problem, talk to the people who have the problem, try to figure out what's going on and iterate. Whereas like no one learns things that way in school. Like no one's like, hey, like we're gonna drop a rock off the building, see it fall and then figure out what happened, right? You never learn physics that way. And so I think that what happens is that when these founders go into startups, they're looking for the teacher. Is the teacher is the cheat, right? Like how much harder would it be to learn physics without the teacher, right? It's funny, I'm sure. Like, you know, people email you and me sometimes after these videos, they watch these videos and our whole point is go talk to customers, go figure it out. And they email us and they're like, can you give me advice? Like they kind of aren't getting the video, the point of these videos at all, which is what we're saying, which is a little bit frightening is that authority figures don't have the answers for a lot of these questions. And if you're looking for authority figures to tell you your idea is good, you still aren't really getting the point of these videos. We're kind of telling you, you have to go get ground truth answers from customers and that you really can't substitute anything for ground truth answers. And doesn't that suck? Yeah, that sucks. Sorry, I wish I could tell you that I had all the facts. I feel like we can't make it not suck, but isn't it nice that we're just being honest with you and be like, this is exactly how much it's gonna suck. It's not easy. What I find distressing though is how investors often get this wrong. Investors often believe that founders don't need this ground truth or you can just take solution from A and put it in place B and work. Give companies money. Those companies start doing company building, hiring the execs, hiring the team. And this happens to YC companies all the time. You talk to them two years later and you're like, they come to you and they're like, it's not working. And this happens to YC companies a lot. They'll go raise a lot of money, ignore us for two years, come back when it's not working, but they have a team of 50 and be like, Michael Dalton, what happened? It's like, well, did anyone like your product? Did you solve any problem for anyone? Or let's look at a core stat. You charge people. What's your revenue look like? And then- Well, we're not really focused on revenue right now. We wanna grow. We wanna grow. We have to increase the net. We know this company personally. We have to increase the number of customers who could buy us before we increase the customers who do buy us. It's like, well, oof. It's great logic. Yeah, it's good. I do, what is comforting to me though is that when the runway gets down to about 12 months, the magical thinking starts fading, you know? Suddenly- It's funny, don't you wish you could bottle up? Like if you see someone's performance, you have 18 months of cash, the first like 15 months, eh. When someone's back is against the wall, the quality of their decisions get much better. If there was a way to like gamify, like if you bottle up the quality of execution and thinking and like, I don't know. We see people do great work. It's just, you wish they would do this great work when their back is not against the wall. Again, it reminds me of being in college or something where the papers do. And you know, you didn't go to the class, you didn't show up to anything. And then like in the final 24 hours, you like, you do great work. But you could have done that the whole time and not had a whole fire drill, right? Isn't that a shame? It is a shame. You know, the only solution that's worked for me is just like do companies that have such a hard time raising money that it's always a fire drill. But yeah, you know, it comes back to that, like the best founders are disciplined. What you talked about is that's discipline, right? That's doing the right thing when no one's forcing to you or no situation's forcing you to. And I think that too often, genius is mistaken for discipline. It's just like, you know, a lot of people think, oh, this person out executed all their peers because they were smarter. And it's like, no, no, no, no, no, no, no, no, no, no, no. That assumes the peers were actually working on the thing they said they were working on as opposed to like hiring and going to conferences and talking to the reporters. Discipline to avoid the distractions. I mean, that should be comforting to a lot of people. It's like, for every ounce of discipline you have, you can probably lose five, 10 ounces of intelligence and still outperform, you know? Yeah, that's a great point. It's funny how many people that we see, again, let me think how to phrase it, with like, you'd think they'd be really good at a lot of things, but I'm not sure what they do with their time. They have a great resume, but it appears they just don't really do work. And the people that sit down and do the focused work, and again, we all know what this is like. Again, think back to college. You know, lots of reasons to not work on something. If you could bottle up those moments where you're actually doing focused work, the people that succeed just seem better at that. That's actually the criteria that they seem better at. If you looked at their calendar, if you shadowed them or something, the folks that are really good at this are just better at doing focused work. It's kind of nothing else. I mean, really, yeah. And by the way, you can't really change your raw intelligence, but you can get better at this. Like, this is a little bit like working out. Like, you can, you know, if doing focused work for someone who likes to procrastinate is a little bit painful, the more they do it, the less painful it gets, you know? And so, hey, you know, smart people certainly have an advantage, but man, hard workers, oof. Hard workers are dangerous. Like, hard workers are dangerous. Lazy people are, you know, as a startup founder, lazy people, lazy competitors are your friends. Yeah, it's good when your competitors are focused on the wrong things. Along these same lines, like, I wanted to talk about what we learned from hardware crowdfunding a little bit. Yes. So here's the issue. If you need to manufacture a lot of a product, it's much cheaper to do a big order in quantity, right? You follow me? Like, say we want to, let's talk about T-shirts. Let's say we want to create Dalton and Michael T-shirts. It's much cheaper to do an order for 10,000 than it is to do one at a time, right? Of the same T-shirt, 10,000 of them, Yeah, makes sense, right? And so crowdfunding and Kickstarter made sense because you could raise, you could sell the T-shirts at once. We actually had a YC company that's called Teespring, didn't work out, but it was like a way to order a bunch of T-shirts in a quantity. And then you get a big pile of money and then everything goes perfectly and you engineer it and you manufacture the product and all the backers of your Kickstarter get the product and everyone's happy. And you write, you know, you write off into the sunset, right? That's how it works, right, Michael? That's exactly, and then you have, then you're Apple. Again, I don't think people are gonna get the irony. We're being, I'm being facetious for my foreign friends that don't get the irony. So in practice, Michael, what actually happens? What do we see with all these companies that crowdfunding? No idea how to build it. No idea how much building it would cost. No idea how much the thing should cost. So they're charging users for a product that they don't even know what the right price is. The people who buy it have no idea how long does it take to build, which is only matched by the people who are building it having no idea how much it takes to build. And we haven't even gotten to the best part, no idea whether the thing actually solves the problem for the person. But a lot of money up front and God, like a lot of expectations, a lot of untested plans, you know? Well, that's, that's what's funny is like, when you think about it, it seems like the greatest thing in the world to be able to raise money from a crowdfund for your hardware company. But in fact, there's no sure way to make strangers on the internet hate you. Like, it's a really great way to become like infamous on the internet is to be like, you know, here's a cooler with a blender on it and it's like $200 and back my Kickstarter. And then you like, don't ship it. And like, you send out updates that the dog ate your homework and oh, it's Chinese New Year. Like, I don't know, like shit happens. Man, people don't, people really hate you. You're like a villain for like, and thousands of people spend a lot of time trying to like track you down and get the refunds and calling you a scammer. Like, it kind of, we've seen this ruin people we know's lives doing this kind of thing. I think that more and more, there are other areas of the startup world that are starting to resemble this kind of model. And I think that it's hard, man. It's so hard because I remember the run-up to hardware. If you're a hardware company, everyone else was doing this. You look like an idiot if you weren't crowdfunding, you know? And so like, it kind of goes back to the like, hey man, sometimes when everyone's doing something, it doesn't mean that's gonna work. Like, crowdfunding was what? Like a six, seven year cycle? And I think- And it still could be cool. Like, there's situations where it's a tool. I just think, I think our startups seven, eight years ago thought it was a panacea. They thought it was the solution. Like, if you were a hardware company, the only way to do it was to do a crowdfunding, always. Right? And now it's just, it's a tool that you could bring to market. But honestly, you know what the real story here is? Is you usually do it after you've shipped and manufactured a couple of versions already. Like, I think best practices, if anyone here is doing a hardware startup, I think best practices is you don't do it at the earliest stages and you do it later. When you have like V2, V3 and you're ready to manufacture at scale. Cause then you won't create thousands of enemies on the internet that think you're trying to scam them. You know? And again, like all these people had good intentions. I don't think anyone, like no one was actually trying to scam anyone. But intent doesn't matter to strangers on the internet. Does it, Michael? No. You know, there is one better strategy. Do a software company. Lot easier. Lot easier. Yeah. And then along those lines, you know, clearly there's a lot of stuff happening in crypto and this is relevant to this, but just be aware if you take money from people at scale on the internet, they rightfully will hold you accountable. And I just don't know if people, it looks like people are handing out free money on the internet. And I get why people want that. Just understand that there's a cost. And if people think that you, you know, rugged them, if you rugged the people with your thing, you know, it's going to be bad for your life. Right? Like there's a cost. Like there's no, there is no free lunch, I think in this sense. And so, you know, just be aware of that. I don't, and again, I know people that have been on the other side of this. It's not great if they start trying to track you down. And it can change your life forever. I mean, like literally forever, like there are a few things in the startup world that kind of are like one shot kill. And, you know, this is one of them. You screw up with enough people's money, it never leaves you. Like you get that permanent Wikipedia page. That's not what, it's not what you want. All right. Well, that was a good wrap up. Great chatting Dalton. ♪♪♪