If you wanted to build a new compiler, if you wanted to build something that's like really arcane, but that you know a lot about and you have a lot of taste to get a lot of opinions about, a lot of expertise on, often you should listen to that expertise. This is Dalton Plus Michael, and today we're going to talk about commit or validate. When to trust your gut as a startup founder. So I'll set this one up. I find myself encountering two situations at YC. Situation one is a founder who used to work at a company, built something extremely valuable at that company. It was deployed. The company loved that thing, and that founder thought to themselves, maybe other companies would want it. And so they left, started YC to try to productize the thing they built. Example two, two kids, maybe worked a year out of college, and they want to start a startup. They're trying to figure out what to work on. They're both technical. They're smart. They're bright. They want to get rich. Don't know what to do yet. We see these two patterns constantly, and I find it interesting on how we give advice. I'm like, hey, which one of these people, which one of these examples should trust their gut? Basically, we're saying that general advice doesn't apply well to these two cases. We are admitting that you actually need bespoke advice, depending on which category you're in, that's a little bit different. And so again, to make the extreme version of trusting your gut, this is when founders think they're Steve Jobs. They're like, well, Steve Jobs never talked to customers. Steve Jobs, and he would never give people what they asked for. No one asked for the iPhone. He had to envision it. He didn't even use a phone before he invented the iPhone. Yeah. And so the extreme comic book version of trusting your gut is you talk to no one, you somehow from having great taste or a great internal idea of what people want, you just manifest it, and it's totally unique and different. And the opposite extreme is the comic book version of the mom test. I don't know anything. I have no ideas at all. I'm going to only talk to people and have them tell me the ideas and have no opinion. I'm going to assume that I know nothing and all my instincts are wrong. In my mind, the perfect version of not trusting your gut is like the typical investor. Like, I'm just going to hedge. I'm going to invest in a lot of different things and see what works. I can't even commit to one thing. Because yeah, sometimes we talk to founders that are like, yeah, we don't know what to work on. So our plan is to talk to people and they'll tell us what to work on. Yeah. And we're like, great. How's that going? Right? So it's 0% trusting your gut. All right. So let's say you're in that first category. Let's say that you have expertise. You're solving your own problem. You've done something that's created value, either for a lot of people or maybe even just a few. How should you think about the challenge of bringing a product to market slightly differently? Yeah, I think we would argue that if you were inside of a company, you built a tool. Everyone at the company uses the tool. It's still being used, even though you don't work there anymore. You probably know more than you think. Yeah. And that it's probably OK to trust your gut more than you think that you do understand a problem or that you have a unique insight. You've developed some taste. Yeah. And to the extent in other aspects of your life, say you built consumer products. Say you built an iPhone app that was pretty popular and you've gone through that whole thing and you have an idea for a new iPhone app. Well, I think you understand what it takes to build and launch one of these things. Yes. And so it might be a better idea to follow those instincts a little bit more than thinking you have no confidence in your instincts at all. Yeah. And so the more you develop this expertise, the more you can self-discern that other people validate that things you've done in the past are good. It's not just in your own mind you're an expert. Yes. Those folks should feel, I don't know, like I think it's sometimes helpful to just be like, no, you should just listen to your instincts and just do the thing. You know more than most people. So listen to yourself to get this off the ground. Yeah. I often find myself saying in this situation, like make something that would impress you. Yeah. Like make something that you would be proud of. And then like, you know, you can sell that to other people like you. Yeah. And so I think that's kind of a really cool superpower when you can be like, oh yeah, I can tell whether this is good because it's solving a problem I have or a problem I've solved before. Yeah. I can tell whether this is good. If you wanted to build a new compiler, if you wanted to build something that's like really arcane. Yeah. But that you know a lot about and you have a lot of taste to get a lot of opinions about a lot of expertise on. Yes. Often you should listen to that expertise. Yeah. Well, I think that's what's fun for us as advice givers is sometimes we get to work with those kinds of people. And the biggest mistake we can make is try to have opinions. It's like build what you want. Would you have liked this? Would you have bought it? Yeah. Would you have talked to yourself? Would you have read this email that you just sent about this thing? Yeah. Like those tests all work when, you know, you should trust your gut when you have some preexisting experience. Now what about when maybe you shouldn't trust your gut? I think one way to self-diagnose that maybe, yeah, your gut instinct may not be dead on is where you find that you don't have a lot of opinions about what to work on. Yeah. Or that your opinions are very mid. No, I'm just kidding. Where your opinions are just very similar to the 50th percentile of other people. Mainstream. Mainstream. And so it'd be like, oh, well, you know, all the jobs you've had are just very high level. You never went deep on any particular topic where you just haven't had that many jobs. Yeah. Is an example. Yeah. And you just don't have a lot of preferences or to the extent you have preferences, they're the same as everyone else. Yes. And I think in these situations, and I've seen you do this many times, you know, you kind of have to have a different mentality. Like part of starting a startup is going to be building expertise. Yep. You're not bringing expertise, you have to build expertise. And I've seen you say this a lot where it's like, hey, if you can start in a good general idea area, a good place where like you might think building expertise here will be valuable. And if you don't over hamper yourself with a complicated plan, you give yourself an opportunity to build, to figure something out, you know? And I think that we're not trying to say one path is better than the other. We're trying to say like, be self-conscious of whether you're bringing expertise or building expertise and then implement a plan based on that. Yeah. And exactly. So let's give a concrete example. Please. Here's one. Let's imagine that you want to work on a new real estate related software company. That's your startup idea. Yep. And in category A, let's say that you have 10 years of experience working as one of the founders was a real estate agent. Yes. One of the founders worked at a mortgage underwriting company for 10 years. Yes. And built software around mortgage underwriting. They have a startup idea and they have a, they're like, we think that mortgage underwriters want X, what should we do to validate this? It's like, well, you probably are right. Or like your judgment about knowing what mortgage underwriters want, if you've been building software inside of a mortgage underwriting company for 10 years. It's probably pretty good. Probably pretty good. And you probably know way more than the average bear about this stuff. You've probably tried other products. Yeah. You've probably been disappointed by the alternative. You know what vendors are available. You know why things work and why, you know. Yeah. And so those kinds of people should probably trust their gut quite a bit. Yeah. About what mortgage underwriters want. Yes. Now let's use a different example with exactly the same idea. A mortgage underwriting software startup for real estate. And the founders have no experience whatsoever in the industry. Just great software development. Maybe they've not even bought a house before. Well, let's just say they bought it. Okay. We'll give them that. Yeah. That's why they're interested. They bought a house. And they have some ideas of like, well, we think the real estate industry is broken and it's weird that it works this way. And so we just think we can fix it. Yeah. And you kind of ask, well, what, you know, how much research have you done or how many people have you talked to in the industry? None. Yeah. And they don't know anyone. Again, these folks can still be successful. Yes. But those folks should probably trust their gut a little bit less that they know precisely what to build to get this off the ground. I think that where we see this goes wrong is when the founder with expertise is fearful and acts like the founder without. And the founder without expertise is too confident and acts like the founder with. Yeah. And I can't say this enough. I've seen so often the founder with expertise where I'm like, you know so much about this. We'll be afraid. Maybe the thing I built was only no one else will want it. Or maybe my taste is unique. Here's one. Have you seen this one where, oh, I know what to build and they want it, but I don't think VCs will fund it. Yeah. Like basically they're like, oh, okay. We actually know exactly what kind of software mortgage-minded writers want. But we're building some AI bullshit. Yes. Because we think we need to say it's AI related. Yes. To raise money. Versus the thing that we know is actually the problem. Yes. That does not involve AI at all. Yes. Like we're ignoring all of our expertise. Because it's not AI. Yeah. And obviously that's the only way you can raise money. And then on the flip side, it's the team with no expertise who are planning out their hiring and talking about how much money they need and reading Goldman Sachs reports about market sizes. And, oh, well, we need two years to build it because it's really complicated. It has to be a comprehensive solution. It's like, hey, maybe you want to build the smallest thing possible and learn some more. And by the way, we're not trying to give, quote unquote, permission to take 10 years to build a magical thing. All we're trying to say is when building the MVP, how much should you be trusting your gut? How much should you be trying to impress yourself versus trying to impress initial users? And hopefully you realize something really important, which is that if you have expertise and you impress yourself, you're walking a good path. You're walking a good path. And if you don't, no sweat. Most folks that we fund, most folks that get into YC don't have a ton of expertise. That is totally fine. Totally fine. It just means you should admit that to yourself. Yes. And start really simple and learn on the fly. Learn within the idea space that you've chosen. Yes. And don't have a lot of prescriptive ideas on what mortgage underwriters want. Yes. Just sort of walk in with, oh, this is kind of what I'm thinking. But I'm open-minded. That's it. I need to learn a lot. And maybe it's helpful to choose an area that you're excited to learn about. Yes. Because you have a lot of learning to do. Yep. So maybe it's helpful to not choose an area that you think, well, I hate this area, but I think it's going to raise money. It's like, not the best way. I think that if you can figure out how to leverage this advice, it's really interesting. And I want to bring it back to the first point you made. It's really hard to give one-size-fits-all advice. Like these two examples, you come with expertise, you don't. And it's the same idea. I'm arguing this is precisely the same startup, just with different people that are the founders. Yeah. I think this is what's fun about working at YC is how often when in office hours with a founder, I'm like, oh, actually, you should maybe do it differently than what you might hear in the video. Like that's the kind of cool thing about being able to work with people one-on-one. You can actually customize it. Awesome. Thank you very much. Sounds good. Thanks.