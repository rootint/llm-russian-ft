One order of operations for starting a startup. More often than not, when I talk to a talented technical person who's thinking about becoming a founder, they're number one blockers that they don't have an idea. At some point during their formative years, they learn that every great startup started with a great idea, and if the idea isn't amazing, usually as judged by peers, parents, or other people with little startup experience, the startup will fail. I think I've read that before. I wrote this because this is the number one excuse I hear from people who want to start a startup. And it's so interesting to me. I think that there are all of these old entrepreneurial rules and business best practices that I think that people just want to apply hand in glove to a new industry. And I think tech startups might be a little different. And so interestingly enough, I don't even think people are really taught how to find ideas. So I feel as though people are sitting there saying, I don't have an idea, and they don't even really understand a process by which to get one. They think they think that it's supposed to happen organically. It's almost like out of the cartoons where a light bulb goes off the top of your head, and that's not really how it works. And so what I wanted to do with this essay was give people a framework that they could try to use to come up with an idea. So instead of this being a passive process, it can be an active process. I think one of the things that might be hard for people to see is, now being in this world for so long, I have a lot of friends who wanted to do a startup and didn't know what they wanted to do, and then came up with an idea and were very successful. And so I've seen this happen with a lot of people, and that's kind of where I've come up with this thought. So you break it out into one, two, three, four, several steps. So I'm going to outline it, and then we can explain. So the order of operations. Here's where I'd start. Is there any particular problem that you're passionate about? The next step. Once you decide on a problem, find some friends and brainstorm potential solutions to the problem. The next step. At this point, the most important thing to make that spark turn into a fire is to work together and build and launch an MVP. And that's basically it. Yeah. It's not that complex. It's hard, but it's not that complex. No, it's not. So let's start at the beginning. Particular passion, a problem you're passionate about. So I think oftentimes, I'll give you the conversation that I had with a founder. I was at a conference over the weekend called Afrotech, and there were a bunch of young people who wanted to start companies there. And this woman walked up to me, and she said, I have an idea. I'm doing a startup that helps other startups. And I call this like a meta startup. And this is startups that I kind of don't like because it's like, in some ways, I think it's like a cop-out. It's like, hey, I want to help give other startups advice and guidance, but I haven't really done a startup myself. I don't know, it's not great. And so I dug in. I was like, okay, so what's a problem that you have? And it was interesting. So the woman was a mother, and she said, one of the problems I have is that there are a lot of places, when I go somewhere new, there are a lot of places where I don't know if I can use my stroller with my baby. Is it hard to get around, or if I'm walking on the street, does it have the proper sidewalks, and so on and so forth. So I'd love some type of product that would tell me what path I should take that's stroller-friendly. And I said to her, okay, we're getting somewhere. Now we're not in this meta idea, now we're actually solving a problem directly, great. But I asked her, hey, can you judge this by two things first? One, how frequent is this problem? And she said, well, actually, when I'm in an area that I know, then I know where to walk, I know how to do it. It's not that frequent. And how intense is this problem? It's like, well, if I have to go over a curb or something, it's pain, but it's not intense. So then I was like, okay, what if you could start a problem that was addressing one of the top three problems in your life? What would it be? And she was like, you know what? A lot of people have that problem. That's a big problem. And I felt my douchebag investor light go off. It's like, yes, you should do that. That is a problem. Even if you have solved that problem, you're going to be wildly successful. There are gajillions of people who have that problem. So I condensed all of the startup advice that she'd been given and everything she read to go to this wrong place when I just asked her, what's the problem in your life? And she almost immediately got to a place that could create real value. Now, how should she solve that problem? Okay, yes, that's another question. But damn, it's a personal problem she has, and she sure as hell knows that if she makes a product, at least if it's helping her, she knows it's halfway decent. So that I got to a really exciting place by just digging into what sucks for you. I think everyone can do that exercise. And I think that exercise can be informed by your work life or your personal life. So many startups I see were created because they were doing something at work and they were like, this sucks. Why do I have to keep on doing this? So it can apply either way. Right, and this is a very easy way to get people to pay you. Whereas doing things like strapping a webcam to your head, not as obvious of a problem. Pretty non-obvious. So once you find a problem, find some friends and brainstorm potential solutions to the problem. So here's the trick. You don't need to skip to a solution too early. Whatever solution I come up with is probably going to be wrong. So what my solution really is, is a first hypothesis. And basically it's like, imagine I'm trying to, I don't know, like redo some famous science experiment. Like I'm trying to figure out the speed of gravity or something, right? I first have to start with a hypothesis, then test, and then repeat, repeat, repeat until I get to my answer. So, I don't need to know the answer up front. Like that's not the goal. If you have a big enough problem, trust that if you come up with anything resembling an answer in a reasonable period of time, years, you have a big business. So, instead of thinking, okay, let me come up with my idea how to solve it, because I think that the number one thing you have to do to create a company, or one of the top three, is to have some co-founders. And it's really helpful to figure out who are the types of people who you can talk to about something, and you riff well. You iterate each other's ideas. There's some type of people you brainstorm with, and they say, like I say to Craig, it's like, well, we might not have a best founder relationship. As opposed to like, well, wouldn't it be cool if the sky was red? And Craig says, you know, we can't make the sky red, but what happens if we tint all the windows in the house red so you can make it look like the sky's red? So, you want to start having those conversations with people that you like. People, if you're not technical, people who are technical. And ideally, together, you start coming up with an idea. And what's cool about that is that if you come up with that idea together, everyone you've been talking to feels some ownership of the idea. And that helps kind of light that flame. Yeah. It's dangerous to be married to a solution. That is a real problem. So, at this point, the most important thing is to turn that spark into a fire and work together to build an MVP. Boom. So, biggest mistake that people make at this point is to think that the things they need to do. Now I feel like some weird phantom MBA starts whispering in their ear and it's like, you need to incorporate, you need to raise money, you need to da-da-da-da. Kick that person out. That's not what you need to do. And you built the simplest we want, even if it's just an Excel spreadsheet. Give it a try. The way to get that team even more excited is to try something. And oftentimes I see people kind of get lost in that legal or that fundraising world and never even got to give their thing a try. You don't need bank accounts to give something a try. You don't need an incorporation to give something a try. For the most part, you don't. And a way that you can really get that team solidified is just to get some kind of MVP and get one customer, two customers. This is one, the final test on like, hey, can we work together well? And two, man, it amps up the excitement a lot. And so that when you have to go through some of the bullshit of incorporation and stuff or fundraising, if you actually have something with a couple of customers, then investors are far more interested to talk to you than if you just have an idea. People who are on the fence about working with you. All of these things that you're saying, these are all excuses you create because it's easier than working on the actual problem. Yes, for some people. But I also think for some people that some people are being, I don't want to say lazy, but some people are being, I don't know. Some people are kind of being disingenuous in this process. But I think other people actually think, oh no, the right thing to do is actually to come up with an idea, fundraise, outsource an MVP, and then hire a team. Some people think that's the right thing to do. You don't have to do that. Well, my failure mode is different then. All right, so then you wrap this essay up with a couple things. The two failed orders of operations. Well, these are two of many, I suppose. So one, come up with an idea and then pitch to investors. Two, I have an idea but can't write code and none of my co-founders can either. Yeah, so we're in a time where there are a lot of startups. And there's, unfortunately, people that you're pitching, if they're good, they're getting pitched by a lot of people. So you need to bring some real fire to that meeting. And a good deck is no longer good enough. I would argue that back in the day, like in the 90s, it was so expensive to get software made and host it online and get users a good deck, or actually back then it was like a 100-page business plan. That's all you could do without money. We're not there now. And so you're not bringing the fire if you just bring in an idea. Now, some people can raise on just an idea, right? And if you're one of those lucky people, it's great. But I don't know, I'd rather be good than lucky. I was like, this is a constant issue. And I'm surprised by this. I talked to a friend the other day who is thinking about starting something and doesn't have a technical co-founder yet. And even she was a little concerned about getting one, even though she's kind of been in the tech startup world. And I had to encourage her. I had to tell her, no, you can. Not only is this not going to be that hard, it's probably going to be easier than outsourcing it. The one thing that I see a lot is that I see people who can raise a little bit of money, go down the outsourcing route, and believe that they are progressing. They believe that the thing is moving forward. And what they don't realize is that, for the most part, they're going to need to iterate anything that is created by those outsourcers over and over and over and over again. And it gets pretty expensive pretty fast. And so the thing that I see so constantly is outsourcing. Iterating with that outsourcer until you run out of money. You haven't figured things out yet. And so you have to go to an investor and say, well, I don't have anything, I need more money. And that's death. And what's so sad about that death is that you've been kind of walking that path the whole time, but often you don't realize it until the very end, and after you've spent money. And sometimes it's people's own money. They do their savings, they hand their savings to these people. I don't think the outsourcing folks are bad or morally wrong. I just think that people should take the hustle that they have and apply it to the number one problem. Getting a technical co-founder tends to be cheaper than paying an outsourcer. To push back, if you had someone outsource something and then that got you a couple customers and then you found a co-founder, that's a great outcome. Well, it's interesting because I think that a lot of people go into the outsourcing route with that intention. But the thing that they don't realize is that they didn't feel comfortable going and finding a technical co-founder now, and they don't have any traction, and they don't have a product, right? Most likely the outcome is the outsourcer will give them a shitty product, a shitty V1. They won't have any users then, and now they'll go after a technical co-founder with a shitty product and no users and less money. And they want to give the co-founder 10%. One, and I mentioned in the essay, there are counterexamples. There are people who do go from contractor to big company, but I would argue it's a harder path, and it's a path that's much more likely to lose you a lot of money. Your own money. Thank you.