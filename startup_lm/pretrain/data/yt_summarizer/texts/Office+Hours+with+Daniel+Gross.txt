So today we have Daniel Gross. He is a new partner at YC and we're doing office hours. So Daniel, some people may not know you. Could you give a quick intro? Sure. My name is Daniel. I started a Y Combinator company in winter 2010. And originally it was called Greplin. We later changed our name to Q. And what we built was kind of a search engine for all of your personal stuff online. So instead of searching Gmail and Dropbox and Slack and Evernote all in different places, you could have one app to kind of have a unified search experience. And we built a really good product, but a pretty bad business model. So we ended up getting acquired by Apple, where I worked for three years on a bunch of different machine learning efforts across iOS, OS X, and a few other platforms. And as a couple of weeks ago, I rejoined Y Combinator, but this time as a partner. Welcome back. Thank you. All right, let's get going. So these are just questions submitted either through macro Y Combinator or HN. First one, is it more valuable to grow a startup community where there hardly is one or help members of that community discover and become involved in a strong startup community elsewhere where there are more resources and connections? I think it would be great if there were more startup communities around the world, but they're really, really hard to create. As it turns out, for a good startup community to exist, you need a certain level of density that's just really hard to conjure yourself. And so unfortunately, if you want to apply the Occam's razor lens of do the simplest thing, you probably want to join an existing thriving startup community. The best one being that I know of being in Silicon Valley, as opposed to try to bootstrap one on your own. And did you move to the States for that exact reason? I moved to the States because I got into Y Combinator, weirdly enough. I'm originally from Israel. And I definitely reflect on the fact that even though Israel is one of the best startup communities outside of the United States, it still doesn't compare to Silicon Valley. What do you feel is the best demographic to initially communicate to students, parents, counselors, et cetera, if we are trying to ultimately get 16 to 19 year old high school students on our application? And why would you choose that particular demographic, whichever one you choose? So in general, the best advice is to always talk to your users. And so if you're building a product for teenagers, you should talk to teenagers. There are exceptions to this rule. If you're building a product where the end customer isn't going to be the one buying your product, an example would be enterprise software. Or if you're building, say, something for babies, then you're going to want to talk to the parents, the people who have the purchasing ability. But you still want to always talk to your users. So this would be something you'd be doing in addition to. And the reason why is if you built something really good, even though those that don't have purchasing power are kind of the ones you spoke to, you've built something that they really want. And they're then going to talk to their boss a little bit harder to do if you're a baby and try to get it. So always talk to your users. If you're making a marketplace app, what are the most common methods for overcoming the chicken and egg problem in the very beginning? For example, I think Airbnb did door to door in the early days. Yeah, this is a really tough problem. The strategy that works best is to cheat effectively and spend a lot of time yourself doing something that doesn't scale by building one part of the marketplace yourself. So if you use the Airbnb example, the founders were really diligent about making sure they had great supply in cities where they had a lot of usage. If you talk to very early folks at Uber, they'll tell you that they spent a lot of time personally handholding, recruiting drivers, making sure that they had good supply on the network. And so if you're trying to build a double-sided marketplace, one way to start is to spend a lot of time yourself doing the thing that won't scale and building one side, either the supply or demand side. Do you think it is better to build a foolproof product and then look at investment to fuel expansion may take longer? Or should you get the first money and use it to build a foolproof product faster but potentially riskier? For reasons that would be far too long to expand on in this office hours, you should always build the product first and then raise money. Raising money is a symptom of success. It in itself doesn't mean much. And it's a giant distraction. Yeah. All right, so AI and machine learning. While important technologies are at a high risk of becoming a buzzword, if they already haven't, I would say they have. To what extent do you agree with the fact that the end output or experience matters more than the tools, for example, AI, machine learning, whatever, that the company uses to create that product? Well, at the end of the day, we're trying to build things people want. And so the end output is going to be how you'll be measured and whether you'll be successful or not. If you build a product with a really cool algorithm that doesn't culminate in something people want, then you won't be successful. The other thing to realize is there are many situations where a human or very simple heuristics can get you 99% of the value. And so as much as I love machine learning myself, more often than not, you should just try to focus on making something people want and do it in the laziest way possible, which occasionally might mean a few simple heuristics that get you 90% of the way there or a few simple heuristics plus a human, which will get you 99% of the way there. Now, is there a point at which you think it's appropriate to switch over? So, for example, say you're a company and you're in the batch at YC. And they, I imagine at this point, are coming to you and saying, like, when should we apply this? What are you telling them? So usually it's when you've reached either. I guess there's two ways of thinking about this. Either you are one of those few companies where machine learning is so fundamental to even your initial product because it's so unscalable to try to do it with humans that you've got to do it from day one. An example would be a self-driving car company. But if you're not in that camp, and you should just be honest with yourself if you're not, you want to start leveraging machine learning when attacking the kind of long tail starts to really matter to you. So I'll give you an example. Say you're working on Amazon.com. And it's your job to make the homepage have great products. You could start off by just putting the top grossing products on the homepage. And you'd have a pretty good experience. At some point, you start caring about the long tail. And so you start wondering about things like personalization. Well, it certainly wouldn't scale to hire a human to model Amazon.com for every other human that uses it. And so that would be a point to try machine learning. But if you're not at the point where you've saturated the short head of the kind of power law distribution of goodness, then it's not time for machine learning. All right. So this question is a bit longer. It's from Kevin. Subject line is, how important is it to raise money? So my startup, so Kevin's startup, Onco Assist, has been going four years now with steady growth. However, we have struggled to raise money. We have had conversations with angel investors and VCs, but they have never come to fruition, meaning they've never raised. Our active users, yeah, I think it's probably, yeah. The active user base is growing, as is the revenue we generate from selling services to pharma. We are considering raising money as, one, we want to move faster. And two, we are concerned someone will copy what we are doing. Are these legitimate concerns or will trying to raise money just be a giant distraction? Well, raising money is always a distraction. The question is whether you can afford the distraction or not. Raising money because you've built something good and you want to move faster, that is to say you want to add more fuel to the fire, is a very legitimate reason to do it. And you probably want to try to do it as quickly as possible with the right amount. Don't spend too much time raising money. Figure out what is kind of the next objective that you want to hit. Figure out how much money you need in order to get to that objective. And then go out and raise that amount. Raising money because you're afraid that someone will clone you is a little bit less of a compelling argument, just because that fear is always going to be out there and you can always be worried about it. But certainly if you feel like you have something great and you just want to kind of multiply your greatness, then raising money is a very legitimate thing to do. In your experience, how worried should young companies be about someone copying them? That's a really good question. It very much depends on the product and the market that you're in. If there are certain situations where there's a first mover advantage. And so if you don't get to that product first, you're not going to gain the network effect, say, that you would need in order to get really big and someone else will and then it won't really matter. There are other products, one can think of, say, Lyft or Uber, where the market is so large and also the network effects are somewhat local and not global, so that it doesn't really matter if someone copies you. I think there are more things in the latter camp than the former, though I think we all tend to kind of intellectualize and believe that everything's in the former camp. That is to say, if I'm not first, it won't matter. But at the end of the day, I think ride sharing is a great example of how both companies got really big. Admittedly, one is much larger than the other, but you'd be pretty happy to be an early investor in Lyft because the market is so large and the network effects are somewhat local. I mean, even Web Search, which has a global network effect with the way search quality works, as more people use it, it gets better. Google is not literally the only product in the market, even though it's the predominant one. So I guess at the end of the day, I wouldn't be too worried about this for the reasons I described. And one other final reason is execution matters more, much more than being first. Facebook was not the first social network. Nor was Google the first search engine. That's right. Not even close. That's right. So I wouldn't spend too much time worrying about it, and I just buckle down and try to build the best thing instead of the first thing. Cool. Agreed. Okay, so this one's formal. Dear YC, I have a unique insight in a field in which I'm a domain expert. I see a huge opportunity for a startup that follows through on this insight. I have the right technical knowledge needed for doing that. So to follow up on the other question, nice and vague. But my level of excitement for this field is a 6 out of 10. I'm much more excited about a different, new subfield of my main field. I would be doing a lot of R&D work in that subfield before I'll have some technology that can be commercialized. And that R&D work is very exciting and fun for me personally. Should I follow through on the first idea, which I know I can lead to a very commercially successful startup? Or should I use my savings to do R&D in the subfield that really interests me for a couple of years and see if a startup comes out of that? You know, I think it was in 2008 that Elon Musk said that running a startup was like chewing glass and staring into the abyss. And this was like, I think Tesla wasn't doing great and SpaceX had failed a few launches. But that is to say, doing startups is really, really hard. And I think, I kind of think the only thing that makes it worth it or that enables you to see it through is that you really love what you're doing. And, you know, a lot of people like to repeat Steve Jobs' quote about making something insanely great to be evocative about how good it has to be. But I also think he was trying to imply that you have to be somewhat insane about the field that you're in. So I would spend all of your time on something that you're passionate on because life is short. Also, startups are really hard. So it's only worth doing if you love it. Yeah. Especially when you think about recruiting people, if you're checked out. That's right. That's a really good point, too. Yeah. So the answer is the subfield. Yeah. So, all right. I studied business for two years at a community college and switched my major to CS for a semester before dropping out to learn on my own. I ultimately want to found a startup, but I want to work at a startup to gain experience first. How does someone young without experience or degree go about getting a job at a startup? For example, if I cold email founders at startups I love, how can I convince someone to give me a chance versus the Stanford grads they're looking at? What about trying to work at companies like Uber or Airbnb that are later stage? Well, that could be one strategy. So put yourself in that founder's shoes. You just got an email from someone you don't know that doesn't have any credentials. Really, what you want to do is you want to figure out a way to stand out. As much as possible. So one simple answer is if you can figure out how to get a job at a larger company that may be more accepting of whatever credentials you have as a stepping stone to working at a high growth startup, great. Another strategy that works well, too, is to just try building things. They don't even have to be revenue generating things. You can build a library that you open source that a lot of people use. And that alone, I think, will get you a lot of acclaim, especially in the engineering community, which I've seen be really, really effective at helping people get jobs. Resume gets passed around, and people are more excited about the GitHub project that you have than whatever credentials you have. And I think that's far more indicative, frankly, of how you're going to be as an employee, because it shows that you are self-managing. You have the ability to get stuff done, make trade-offs. And that's often not fully taught, I think, in a college curriculum. And I don't think you really feel it when you're maybe, whatever, they're 20 years old. But if you play the long game, it also works out. It's something that you see lots of people do, like immediately asking for favors before they've even really gotten to know someone or provided value. And I think it's easy to overlook. Cool. Okay. So, hi. I'm trying to get into a beta launch of grocery delivery product, okay, suncart.co in Qatar, and have not been able to find a technical co-founder over the past six months. I got the product made from an outsourced company, so I assume that's a contractor or a consultant. Should I go out and start the beta launch without a tech co-founder and keep the hunt going simultaneously? What should be my way forward? Finding a co-founder is, in general, really hard. Finding a technical co-founder is even harder, just because the supply is smaller. And so, I guess the first thing to ask yourself is whether a certain degree of technical acumen is going to be downright fundamental to your company's success. And it's completely okay to say no. There's a lot of companies that are built on software platforms that are sufficiently abstracted, such that you don't need the co-founders to be technical in order to build something great. So, if you're in the former bucket, your charter is clear. You kind of have to continue your search. If you can convince yourself that you're in the latter bucket, then one good strategy is to just try to find your first engineer, second engineer. This could be a person that doesn't necessarily have to have the level of fervor and commitment to the product that you do. And you'd give them a hearty chunk of equity, but perhaps they wouldn't be necessarily your co-founder. And this would just let you kind of expand your search horizons to far more people. I have, in general, not seen success when people have tried to not even have engineering in-house and have outsourced that as well. Just because that tends to put you a little bit too far away from making iterative product changes when you constantly have to go back to a contractor who may not understand the context, the rationale behind the changes that you want to make. So, in a nutshell, it's worth thinking about whether you need a technical co-founder or not, depending on what you're building. It's totally okay if you think you don't. In which case, I would just try to hire an engineer or two. And because they're early, you should give them a decent chunk of equity, but perhaps they don't have to be a co-founder, per se. Do you have a number in mind when you say decent chunk? If you're considering someone in your first, say, eight or so hires, if you don't have any significant traction or growth, that is to say it's not obviously working, then you should be giving them anywhere between one to five percent of the company. Cool. All right. So, lots of founders in the valley will start things based on trends, as mentioned before. And at that point, it tends to be too late to be a first mover and be innovative, which you could debate. How can you be someone that lives in the future on the leading edge of technology? So, I think the answer to this question is actually pretty simple. Just try to use all the bleeding edge hardware and software. Today, that would be something like maybe using the Oculus headset or the Vive headset. But I think it's actually a really good question because it points out the fact that living in the future is actually a really good way to simulate what good startup opportunities are right around the corner. An example of this is in 2007 or 2008, having two computers and having this pain of having files that weren't instantly transferred between both computers. And I think the twist is not only to live in the future, but to kind of observe the hacky ways people are working around problems in the future. If memory serves, if I remember correctly, the Dropbox Hacker News launch thread had a lot of people saying, this isn't a real product or company. I already use rsync, which is basically an open source terminal library you could use to sync files between my computer. And they were obviously wrong about the company size, but they were right. They had solved that problem in a hacky way. So, I guess I would say I would live in the future and also be aware of kind of very crude things people are building because they're in this very small audience of people living in the future and they can solve their own problems and try to see if there's something that you can generalize. And I think that's another strong point for being technical. When you see your friends hacking things together like that, most people aren't going to go into the terminal and get stuff done. Yeah. And there are a lot of products there. That's right. Okay. So, next question. If I know I want to start a startup in X amount of time, what should I be doing in that time to prepare to be a founder? How do you turn yourself into the formidable founder that everyone in the startup world aspires to be? I think that when you look at a lot of these successful founders, the qualities that you perceive to be as formidable are not innate. They're learned. And people become formidable over time. And I have found for myself, I don't think I'm that formidable, but I certainly became more formidable as a result of doing a company. And I don't think that there could have been a way where I could have learned that by watching a class or by learning something or by going to a course. I really had to do it for myself. And so, the best way to do this is to just try to build something. And the best way to try to build something, I think, is to apply for Y Combinator. So, I guess my advice would be try to make something people want and join YC. And to put it in perspective, no one is born as this formidable founder person. If you go around YC, they're just normal people. That's right. And similarly, if you talk to these big shot founders, even now, they're just normal people. That's right. I think there's a halo effect that gets created for these people. But you forget. And certainly, I think if you'd ask their friends, I'm sure they'd look with kind of rose-colored tinted glasses in the past and say they always seemed cool. But when you talk to... I know a lot of people that today you'd say are very formidable. And in their early days, they put their pants on in the morning just like you and I do. Yeah. Venture investing would be a lot easier, if you could tell that from the beginning. Yeah, yeah. That's right. There's a gene. Yeah, exactly. It's like we just scan you. Oh, there you go. Done. That's right. Cool. All right. So, how can a company start working on machine learning models? We have lots of data, but we're not sure what to do with all that data. We feel pressured to start working with machine learning should we try to get into it. So much like the previous related question on this topic, I would not spend time doing machine learning because you feel like the industry is abuzz about machine learning. I would do machine learning because you feel like your business absolutely depends on it. One thing to look into that I think recently came out is Google's coding practices for machine learning. And it's a really interesting document with a bunch of rules about when and when not to use machine learning at Google and how to do feature engineering. And I believe the first rule in this document written by Google, probably the most formidable machine learning company on the planet, is rule number one, you don't always need machine learning. Feel free to launch a product without it. Yeah. And so my advice would be to really ask yourself whether you need it or not and don't do anything because there's a trend. I can't think of a single opportunity where that's worked out well for anyone. And if you did want to get your feet wet, do you recommend any courses or anything like that online? If you wanted to get your feet wet with machine learning, Andrew Ng's course on Coursera, I believe, is quite good, educational, and easy to consume. How feasible is it for someone to fly to Silicon Valley for a week or two and raise money for a startup? How would you set up appointments? That's really hard. Silicon Valley works because it's a network. And just like a pathogen or a virus, if there's kind of an unknown entity coming into the network, it won't get accepted easily. And so you have to become known in some way. And so one strategy could be trying to, from your local country, do a lot of content marketing, try to set up a lot of meetings with your friends of friends. If you're really lost and you have no network, I do think this is an area where Y Combinator adds a tremendous amount of value. There's a lot of Y Combinator founders, myself included, that arrived here literally knowing no one. I knew zero people in California when I arrived, seven, eight years ago. And Y Combinator created a network of, obviously, investors that I could talk to through Demo Day, friends. And I think it's a very good vehicle for that. So the easiest answer to that question is apply to YC. And to add to that, it's a myth that everyone at YC went to Stanford and is from here. That's right. And it's just not true. Yeah. So yeah, I would apply. And adding to that, if possibly you wanted to try something like this, I suppose you could have a network out here to some extent of friends and they can intro you. But I think by and large, it makes sense to be out here. Yeah. Cool. All right. What are the most common mistakes you have seen first-time entrepreneurs and founders make? Lots. There's a lot. The largest one is unsurprising, is that you don't talk to your users enough. And I think the interesting point about this feedback is not necessarily to listen to it or watch it on this YouTube video and then immediately discard it. It's to realize that generation after generation of people who try to build companies, no one seems to learn this lesson. And people continually don't talk to their users enough. So it's worth thinking about why we have to repeat this lesson over and over and over. I think it's because it's far more comfortable to try to paint a perfect painting than show it to the world. And so when in doubt, assume that you're not talking to your users enough and you need to talk to them more. It really doesn't make sense to list out, I think, any more challenges people have or mistakes people make, because this is such a paramount one. Most companies die because they don't make something people need. Agreed. Does YC accept startup founders aged 18 or younger? I think I was 18. Yeah, you were pretty young. When I applied. So I'm existence-proof of 18. And I don't think I hold that record anymore. So we may have done younger as well. So that would be a yes. Yeah, that would be a yes. I guess last question then. What's it like being on the other side now, giving advice? Well, that's a good question. It's really thrilling, frankly. I feel so kind of from a self-ish standpoint, it's fascinating to learn about all the great things a lot of the Y Combinator companies are building. From the selfless standpoint, I feel like, I hope, I can really help people avoid common pitfalls that I went through. And so I can kind of accelerate this rate in which more goodness comes into the world. And so to me, it's been the coolest job I've had to date.