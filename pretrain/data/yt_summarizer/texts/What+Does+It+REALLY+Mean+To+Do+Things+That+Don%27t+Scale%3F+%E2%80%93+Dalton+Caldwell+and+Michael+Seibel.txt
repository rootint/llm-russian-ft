The moment I remember on my first test ride on Cruise that I'll never forget is we're driving down 101 and Kyle says, oh, a shadow. Let's see how the car handles that. And I was like, oh shit, Kyle. Hey, this is Michael Seibel with Dalton Caldwell, and today we're going to talk about what does it really mean to do things that don't scale? This term was massively popularized in a PGSA from 2013, but it was advice that he'd been giving YC founders for a really long time. But Dalton, it seems like a lot of founders get this confused. Doing things that don't scale is doing something that's provocatively manual on your part, where you, the founder, does a thing personally and that isn't counting on a lot of code that you're writing or scalable processes to run how you think late-stage companies are run. Might help for us to give some examples. Let's give examples. Reddit. So day one, Reddit exists, site. No links. No users. No users. Blank page. But like, click a button to submit a link. What do you do if you're Steve and Alexis? So the scalable solution is you first launch subreddits, then you run ads to recruit people to come sign up for Reddit on different topics. And then, hold on, then you would hire an influencer. You would get, you have an influencer strategy to get influencers on various topics to come moderate the subreddits, okay? And so that the day you launch, you have this big, splashy launch with hundreds of thousands of signups, right? That scales. That scales. What Steve and Alexis did was they made a little tool that allowed them to submit a link. The same thing that normal users used, but they had a little extra field where they could put in a username. And they just started inventing different usernames and submitting links like them. So day one, when they emailed this to their like six friends, it looked like there was a page full of users, when in fact, there were two users. And I remember, Steve tells two stories. The story, the first day someone else other than them submitted a link, which was not day one. And then he tells another story where like, I think he went out and he got drunk. And the next morning he had forgotten to like load up this morning's fake links. And he thought the site would just be blank and he was like so pissed himself. But then he opens up the site and it looked like there were enough other people submitting links that the site wasn't blank. And then he was like, and that might have been what, 20 or 30 people, right? And he's like, oh, wow, like major milestone. What was the DoorDash story, Dalton? Well, look, when you think about something like food delivery, you imagine a scaling, you want to be doing hundreds of orders a day. And so the way the founders got started, was they just did all the deliveries themselves. They didn't have to hire anyone or build a driver app or recruit drivers. If someone made an order via DoorDash, if some miracle happened and someone made an order, the founders would like drop everything and go deliver the food, right? That was actually how they got started. Go ahead. What's so cool about that is that, you know, one of the other topics in this essay is like delight your users, right? Well, the easiest way to delight your user when you're doing food delivery is you do the delivery yourself, right? You race to the freaking restaurant, you make sure you get the right thing. You throw in an extra, you deliver it yourself, you say, thank you. They didn't have to deal with managing a driver network, motivating input, it's like they just did it themselves. Think about all the other ancillary benefits where they got to see why it was hard to do the deliveries. They got to talk to the restaurant owners personally and develop a relationship with them. They got to talk to their users. They'd be like, hey, here's your burrito. I'm the founder of this company. Do you like it? Would you order again? Isn't that funny? Like, could you imagine a more lower status thing than, of course not, but that's why it was awesome. It was not scalable. It is, in present day, if you order from DoorDash, Tony is not going to deliver your burrito, or he might statistically. He still does this sometimes. I'm sure everyone saw the news. He still does this. To this day, the founders still do deliveries. But like that was not a scalable strategy, but man, that's how they got off the ground. I think the last example, you know, in light of Cruise, you know, Cruise this week started to allow the general public to drive in a safety driver-free driverless car. And I remember when Cruise was in YC, and the V1 of the car, the V1 of the driverless car, Kyle and his tiny team built in three months. They retrofitted an Audi. To call it driverless would be an overstatement. There were a couple of things I remember. Number one, there was a big red button on the floor in the driver's seat. And Kyle never explained what that button did. It was clearly important and very easy for him to reach. Number two, it only works on the highway. Number three, it was basically adaptive cruise control. Like it was basically cruise control that stayed in your lane. It wasn't more fancy than that. And then number four, the moment I remember on my first test ride on Cruise that I'll never forget is we're driving down 101, and Kyle says, oh, a shadow. Let's see how the car handles that. And I was like, oh, shit, Kyle. Out of everything I was looking out for, like curves, other drivers, signs, I didn't know that I should be afraid of the shadow. And that was V1. That was V1. And Google had cars on the road retrofitted with all kinds of fancy equipment at that time. Kyle had his Audi that couldn't deal with shadows. That's how it starts. So why don't you talk a little bit more viscerally, Dalton? We've given some examples, but give us more on what do you think the life and the job of a CEO in these stages, in these do things that don't scale pre-product market fit stages. Yeah, I think in the do things that don't scale philosophy, the job of the CEO and the job of the co-founders is to do the shittiest, worst, low status work you can think of. It's the opposite of whatever your mental model when someone says the word CEO, and you're like, oh, wow, CEO, visionary, powerful. It's like, no, you're doing the shit work. And you've got to learn to love and embrace the shit work. That is your job at a pre-product market fit startup, is to actually make everything happen and to be personally accountable for making the entire system run end to end. And we just see so many founders that think it's their job to be like at the late stage, they're emulating what they think Elon Musk is like, or Mark Zuckerberg or something. But when you're a really small startup, it's the exact opposite in every way. This thing that came to mind is we talk to a lot of smart people who aren't cut out to be founders. I think the reason why is that smart people don't tend to want to do shit work. And it's like a special kind of person who's smart, but who's like, no, no, no, I'll get in my car and go pick up that order. Or like, no, no, no, no, I will hand figure out how to build this horrible motor to move a car wheel. I'm going to get into the guts. And most smart people just don't want to do that, especially if they get jobs where they don't have to. Think about how much, for most of our founders, their actual job is answering customer support emails and talking to angry, irate people that hate them. And they're like, I hate you. You're dealing with up close and personal feedback because you're a tiny startup, right? There's no one else to yell at. And so every time DoorDash screwed up an order, the founders of DoorDash would have to be like, I am very sorry. We will do better. You're the front lines. Yeah. I love that. I love that because sometimes founders want to put other people on the front lines. And it's like, God, like, no. Like, you are the front lines. But it's more scalable. Again, and again, we're not trying to be facetious. It is more scalable if the founders could spend their time on other tasks, right? That's more scalable. But if you're doing things that don't scale, you embrace the suck, right? You give it a hug. You're like, yes, I love doing this horrible work. That is what actually doing things that don't scale is. Well, and then to your point, you learn. You learn what other people are unwilling to learn. So you build a better product. And so you serve your customers better. And especially when you're dealing with incumbents, you better believe that their senior management team isn't out on the front line. So whoever is developing the product there, they have some researcher or some outsourced person doing all this customer surveys and crap. And if you're on the front line, you'll learn 10 times more than they will. What about your friends who are making fun of you? Because you're doing this shit work. You tell your friends what you're doing. You know, they work at Google. They get free food and free laundry and Google Boss. And they're like, what are you, you're hand delivering food? Like you're hand adding links to your own link sharing website? Like, how do you get over the know what I was telling you? Like, you are an idiot. That's not how it works. I know how it works. I work at Google. Well, you are an idiot because you started a company. No, just kidding. Like, this is what comes with the territory, friends. Like, if it were easy to start a company and anyone could quit their job at Google and just magically have product market fit and be successful, way more people would do it. Like, how many Googles are there in the world? Not many. And it's because there's this, this stage screens out most people because it sucks, right? It sucks hard. And so most people look at this and they're like, I have to do what? And then most likely I'll fail and I'll go broke whereas I can keep my high status job. This screens everybody out. This is why they're not more successful founder. Like, the reason why there's not more startups in the world is not because there's lack of good ideas or innovation or I would argue even funding. It's basically there aren't enough people that really wanna do this stage of the startup and are good at it. Now, let's talk about this kind of, we keep on bringing Google. Let's go with this phenomenon. I see so many young founders basically saying like, before I start a startup, I need to work at a big company. That's where I'm gonna learn how to do it. Do you think Google's gonna help? Or where, how do you think it helps and how do you think it hurts? Because I think it's more nuanced than just one or the other. To set the scene, if you've ever interviewed for like a programming position at Google or Facebook or Amazon, a lot of what they have you do is design algorithms that ideally are scalable algorithms, right? Like ideally you're not bubble sorting on the whiteboard during your interview at Google, right? And so it gets ground into you during the selection process that your job is to design solutions that scale. And when you're inside of a big tech company, you're rolling things out to millions or tens of millions of people. And so you're beat into your head that you only scalable solutions are good solutions, right? Like if Facebook had some new feature, but it required them to buy a hundred times more servers, which would bankrupt the company, guess what would happen to your bright idea? Can't do it. It's gotta be more scalable, right? Or like, so every single product idea or feature that you build inside these companies is viewed through the lens of scalability and rightfully so, you still with me? Yes. Now this is what's funny if you think of these jobs as training for startups is that now you've had deeply ingrained into your brain, what I would argue is not helpful at the earliest stages. This is helpful when you make it to late stage, hallelujah, right? But the early stages, you just got immersed in a culture that is not helpful versus if you never worked at one of these companies and you just like graduated college, no one ever told you to worry about scalability. You're like, yeah, cool, whatever. Like, you know, I wrote the algorithm with a bubble sort. That's okay, right? Like, you've never been yelled at by your boss because you came up with unscalable ideas. You want to be trained at doing just enough as opposed to doing perfect job. And like, the startup needs to do just enough and Google needs to do way better than just enough. And I think that like, what's hard for me is that sometimes you see those founders and they can't launch. They're like, oh, something's broken or oh, a customer didn't like this and they just like cannot bring themselves to launch because it's not perfect. Well, think about it. If you're at Google and you launch a new feature or if you're at Facebook and you launch a new feature and it doesn't scale, like if it doesn't work, that's the fail. Like, congratulations, you suck and your team sucks. Right? And again, like, they're not wrong, but like all the incentive structure is set up to not launch a feature that is not scalable. This is where that scalable word comes in, right? You're not helping the company. So one thing I think is helpful is like, how do we help founders prepare their minds for this zone? And we're telling you it's gonna suck. We're telling you to do things that people are gonna make fun of you. We're telling you that you might have to live in this spot for a while before things start looking better. I think that the big challenge the founders make is screwed up expectations. Like the big challenge is that founders think I launch it and then it's gonna work. And I really wish founders went in with the mindset of like, I don't care if it takes two years to work. Like, how do you set your mind up so that you're immediately not disappointed? Because I think that it's like, you know, we talk about this at YC all the time, maintaining motivation is like three quarters of this game. I think this is a great question. And it's funny how much the questions, like if someone got to spend time with us, Michael, you know, say someone went to dinner with us, what they wanna ask us about is like fundraising, networking with, you know, I know exactly what people would wanna talk to us about, but usually what you should be asking us to talk about is like emotional wellbeing and maintaining motivation and dealing with high stress situations and dealing with criticism. Like a lot of people aren't prepared for people on the internet criticizing them. It's hard, right? And so it's funny how much what people think expertise, like what they think they want help with and what they actually need help with are not the same thing. And think about how many startups that we fund die basically because the founders run out of gas and get sad and wanna go back to their jobs at Google because this was not what they thought it was. Man, motivation, I don't think motivation is about how shitty something is, right? Like I think it's about how shitty did you think it was gonna be when you started? I think that's what screws your motivation. It's like, how shitty did you think it was gonna be when it was started? That's why, I mean, honestly, when I do talks to college kids now, I'm just like, this life sucks. Like this is the first thing out of my mind. I'm just like, this life sucks. It's like getting punched in the face every day. And like real face punch, like not like fake. It's like, you're gonna get punched in the face. You remember that shit for like the rest of your life. That is like not funny. I mean, to this day, I'm sure you do too. Man, I have like bad dreams about my startups. I still have like, it's not like we're insulated from this. This was hard. This was like the hardest shit we ever did. Yes, by far. And we probably will ever do. So, I mean, to kind of wrap this up, right? Like this idea of do things that don't scale. One, it's gonna be counterintuitive. Two, expect people around you to not understand. And to actively think you're stupid. Like not just not understand, but actively tell you you're being an idiot. Like, why are you delivering burritos? Like what on earth are you thinking? Like you're making a, like they'll like stage an intervention for you. You're screwing up. Your friends will come together. They'll set you down and be like, what are you doing, man? This is a mistake. This is not what you should be doing. Expect it to look way different than what your larger competitors are doing now. Expect it to look way different. And expect yourself to be the primary actor. You're not acting through others. You are the doer. Anything else to add though, to wrap this up? I think if you look at other companies that raise a lot of money, you're inclined to copy that strategy of what they're doing. So again, if you see someone, all these companies are doing, I don't know, 10 minute delivery, right? Like that's the hot new thing. And so they're like, oh, this company raised 50 million. I better raise 50. Do things that are no scale is cool. Yeah, not for you. Go do one delivery. Like when I see people fail a lot, it's that they want to get a thousand customers and they can't get one. Just being able to say one, we've delivered one burrito separates you from the pack. And so again, maybe this is an inspiring thing. Actually doing something is much better than average. Congratulations, you're in the top half of startup founders if you can get out of your own way enough to do one thing. To extend that, and if you can get that person to do it again. They enjoyed it enough the first, the customer enjoyed your product enough the first time that they're gonna use it again. Because that's the other question. Oh, we have a ton of users. Like, oh, like how often do they come back? It's like, come back? Were we supposed to be looking for, were we supposed to be measuring that? Was that on a test? I didn't study for that one. It's like, well, okay. All right, that's do things that don't scale. Don't just take our word for it though. The essay's online. You can read it. And trust me, you'll get a lot out of it if you just go read it. So Google search do things that don't scale PG and I'm sure you'll get the link in the top. All right, see you later Dalton.