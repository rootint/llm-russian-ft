Good morning, everyone. My name is Gustav, and I work here at Y Combinator as a group partner. I've been here since 2017. Before YC, I was a product leader at Airbnb, and actually a YC founder back in 2007. Today, I'm going to talk about how to talk to users and your future customers. Here's what I plan to cover today. Why the best founders talk to the users throughout the lifetime of their company. Two, how to find your users and how to talk to them. Three, what questions to ask them and what not to ask them. And four, how to turn your conclusions into an MVP. Most people in the world have the idea on how new startups are formed completely wrong. They think ideas of new products is something the founders just come up with on a lazy Sunday or a late night coding session. You probably know it doesn't work this way. This scene, as you can see here, is a scene from the Social Network movie. It's a great movie, but they got a lot of things wrong on how Facebook actually got started. This is Brian Chesky. Brian is the co-founder and CEO of Airbnb. On the left side of the photo is Amol. Amol was the very first guest on Airbnb. They actually spent a weekend together in San Francisco when Airbnb kind of launched. You notice the difference between this photo and the previous photo? Well, this photo actually is a real photo and includes a two-way conversation with a real customer. Great founders talk to future customers before they even have a product. In fact, the very best founders in the world learn directly from their users throughout the life of their company. Let that sink in. If you have correctly identified who your users are, you should learn from them throughout the lifetime of your company. Why, you might ask? Users and customers will keep you honest. They are the only stakeholders actually paying you anything. If anyone will tell you the truth, it will be them. So my talk today is about how to do this well. So let's talk about another Airbnb story. In 2010, and I remember this myself, Brian Chesky, the CEO of Airbnb, he decided to launch an experiment. He was going to give up his apartment and live in 50 different Airbnbs over the next couple of months. You might ask yourself, why would anyone do that? So much hassle. Most people who read the articles about this experiment, because he did announce it, they missed the point. I personally remember this being kind of crazy. By doing this, Brian will literally get a chance to talk to every one of these 50 hosts each single day on his trip, and one incredible source of honest feedback on your product. Without the Airbnb hosts, Airbnb would not exist today. What Brian, Joe, and Nate did so early is deeply understand the motivations and the feedback from their hosts. Still today, Brian and Joe gets calls from hosts on their personal cell phone numbers. I remember them telling me that on the first day I worked at Airbnb. Why do they do that? Well, it's the number that they put on the website and share with all of their hosts early on. They weren't hiding behind anonymous email. They wanted to hear from the customers. At the time, this seemed almost radical. Most founders would spend their time in front of their computers trying to find scalable growth channels like Google Ads. Unfortunately, most founders still don't build personal connections with their users today. They hide behind info at emails or do not reply emails. You don't believe me? You should just do a search in your email for do not reply at and see how many people don't wanna talk to their customers. So let's start by trying to figure out who I should talk to. It's always easy to interview people that you know or people who are on your network. They're simply the most likely to respond, but perhaps can be less honest in their answers to not offend you. Don't be afraid of reaching out to them, and don't be afraid of rejection. The second group here is co-workers or former co-workers. They can be a really great source. They might know the topic really well. And if you're building software for startups, you can easily navigate yourself to someone who's a potential user. It's also very common that the early users you speak to are outside of your personal circles or your co-worker circles. When asking YC founders how they found their early users, some of the most common answers were LinkedIn, Reddit forums, Slack or Discord communities, and sometimes in-person events. So to illustrate this process a little better, I'm gonna start a new mock startup. This is not a real company. I'm just making it up. But I'm gonna go through the process as I would have if this was a real company. And first, I want to understand if the problem is real. My hypothesis that I have here, or kind of like the idea space that we sometimes call as NYC, is that companies want to reduce their carbon emissions, but for whatever reasons, don't do that. So my plan is very simple. I wanna first interview some potential customers. Two, learn about the problems and motivations around carbon emissions. And three, try to understand what an MVP will look like. MVP is a minimal viable product. To do this research, I plan to start by reaching out to founders, CEOs, CFOs at startups, or bigger companies. I'm also gonna reach out to people on LinkedIn that have titles like carbon, or climate, or sustainability. Basically words that give me a hint that they might be relevant people to talk to. So what am I looking to learn? Well first, I'm trying to understand, do the company that they work for care about their carbon emissions? And two, why do they care? And why do they not care if they don't care? And three, who in that company might be the one who cares the most about this and why? All right, so here's two examples of outreach messages. So the first one is a LinkedIn message to a CFO who I used to work with at Airbnb. The message will go something like this. First, I introduce myself. I mention something about our time at Airbnb. Then I say, I'm starting a new project. Briefly describe it, but not too much in detail. And I just ask for a 20 minute phone call or video call. And here's another example of a message to someone I don't know. It's also on LinkedIn to the same group that I mentioned earlier. It's similar, but geared towards people I don't know. So the message and the tone will be a little bit different. All right, so once again on the phone, or once again on the video call, let's talk about how to actually interview potential customers. So first, you wanna make sure that these interviews are over video calls, phone calls, or in person. You can learn a lot more from a five minute video interview than 500 or 5,000 survey responses. Secondly, you want to build some rapport with the interviewee. They're going to give you answers to questions that maybe no one have asked them before. So you need to make sure that they can trust you and feel comfortable in this situation. Next, the most important thing here, the most, most, most important thing here, is to not introduce your idea till maybe at the end of the call or maybe not at all. Doing this too early can bias them in their answers. Your role here in this interview is to listen, not to talk. There are some great techniques to get people to open up and talk about their problems. And one good one is to ask follow up questions that are open ended. For example, tell me about that. If you're not recording the interview, you should at least take notes as much as you can. You need to translate the recordings to notes anyway, so you might as well take notes in the actual interview. I'm going to play an example video here on how a potential customer for my carbon emission company and how that conversation will go like. Hi, how are you? It's been a long time since we worked together at Airbnb. Yeah, great to see you. So I don't know if I told you this, but I'm thinking about starting another company. And I have a couple of questions I wanted to ask you about this area that I'm interested in. Does your company, Monteview Inc., do you care about your carbon emissions? We do actually care. And we use a consultant who creates these PDF reports once a year. Interesting. What do you do with a report? I mean, right now, I don't think we really take much action on it, unfortunately. Well, why not? It's just really hard to know what to do with the information. The information is really dense and uses words we don't really understand. Tell me more about that. Well, we hired this consultant. They asked us to fill out this Word doc with information. But much of the data that goes into it seems inaccurate. And I just feel like we need another expert to figure out what to do with the data. Got it, got it. But why is it important for your company at all to track carbon emission? Well, our customers have been asking about our emissions and so has our bank when we try to get new loans. And I think there's some regulations coming up too. You notice here how I never introduced a product or a solution. I only ask questions to learn about the problem that Amy's having. I don't even say what I'm going to build. That's how you want to do it. Here are some very specific questions that you can use in your interviews. One, tell me how you do X today. By X, of course, I'm referring to a specific problem, a task, or a goal that you are trying to solve. Two, what is the hardest thing you are doing about X? Three, why is it hard? Four, how often do you have to do X? Five, why is it important for your company to do X? Make sure you dive deep into this question, like understanding their motivation is going to be critical here. And six, what do you do to solve this problem for yourself today? It's really important to understand what they're doing. Now, if you can watch them do this, that's even better. If they can screen share during the video call or show you their laptop as you're doing the interview and show you how they actually get the PDF report, what they do with it, how it looks like, that's the ideal state. You want to deeply understand their behavior, not just what they're saying, but what they're doing, because changing the behavior will be hard. You can also ask follow-up questions, and please learn how to make use of these ones. It's very hard to get someone to say everything in just one answer to one question. Get comfortable with asking questions like, what do you mean by that? Or, can you tell me more about that? Or, why is that important to you? Here are some questions that you should not ask. There are ways you can kind of derail this interview. Will you use our product? They're probably going to say yes. But they're not going to mean anything to you in that answer. Two, which features would make product X better? Remember, their job is to tell you about the problem. Your job is to think about what features to solve that problem. So asking them about your job isn't really going to help you. Yes and no questions. It's not really that helpful for you. You want them to explain and give you as many concrete and real examples as possible. So just simply asking yes and no questions is not ideal here. And four, how would a better product X look like to you? How would a better carbon emission counting software look like to you? Many of the people aren't product developers. They're not software engineers. They're not designers. They're not product managers. This is not their job. Their job is to do a different job. You are the one trying to understand what is the challenging part about their job. And finally, asking two questions at the same time. It's going to confuse them and it's going to confuse your answers. So when you're eager to get answers, it's very easy to do this thing, but try to avoid it. But I want to highlight one of the things I mentioned here. There's one big danger during interviews, and that is to focus on features instead of problems. It's very natural for you to do that. Your brain is thinking through all the ways you're going to solve this problem. But really what you're here for during this interview is to deeply understand the problems, not actually come up with solutions. That's for a separate event. So users generally have good problems, but also generally bad solutions. So I'll give you two specific examples. So early days of Gmail, users were asking Paul Buchheit, the founder of Gmail, to view both the inbox and the actual email that they were reading on the same screen. Now, why would they ask for that? Well, the reason was simply that Gmail was too slow, and people did not want to wait to load each of the emails in the inbox. They wanted to see everything at the same time. Similarly, in early Airbnb, a lot of guests wanted to have the phone numbers of the host, so they can call them. We're like, why do you need that? It just turned out that they didn't fully trust the platform. We had not displayed enough trust in Airbnb, so they needed to feel comfortable with getting to know the host before actually making the booking. Secondly, users don't have incentive to say no to really any additional features. If you ask for this feature, or this feature, or this feature, they'll probably say yes to everything, right? You, however, are in charge of the prioritizations, and you have a lot more incentives than they have to figure out which are the most important of the features. So let's talk about next steps. So you've done your five or ten of these user interviews. You've written down your notes. Let's talk about what you do then. One, you want to make sure you have notes from each of the interviews. You can use sticky notes or some similar software to organize these learnings. You can bucket them in different buckets that kind of describes different problems and see which one is actually the thing that matters the most. And then you want to write down your conclusions. What are you learning from all of this? You want to use all of this information to create a hypothesis of what the solution to this problem might be. Don't over-intellectualize this process. Really, you just want to start designing the MVP as fast as you can, but you want to make sure you have accurate information when you decide the MVP. And then you'll want to test it with the same users. It's also important to know if the problem you're solving is actually valuable. What I mean by this is that people will value the solution to the problem enough to pay for it. Or the problem itself, solving the problem is valuable. So here's some good tips to determine if it is. One, are people paying money for other solutions in this space today? Are the people that make the PDF reports for carbon emissions accounting, are they getting paid? Well, if they are getting paid, that's a good sign that this is probably a valuable thing. Do people already have solutions to this problem they are very happy with? Even though it might appear basics to you. For example, like Excel or Google Spreadsheets is actually competitors to many, many, many, many hundreds of startups. Actually quite a formidable one. To move someone off Excel or Google Spreadsheet, you need to make the experience of your solution dramatically better. They're not going to pay you hundreds of dollars a month for something they can almost as easily do in Google Spreadsheet or Excel. And three, you want to evaluate how easy it is to sell to this audience. And this is one thing that I like to do a lot with the companies I work with. For example, selling to plumbers or contractors is notoriously difficult compared to selling to startups. The first two groups just don't change their tools or the software very often, versus startups are open to trying new things all the time. So if you are solving a problem that's valuable, you still have to think about whether it's going to be easy to sell to this particular audience. Once you have an MVP prototype, you can start by showing it to users. Even if it's just a design prototype in InVision or something like that, you can just click through. We used to do this at Airbnb all the time. We'd go downstairs in our office, we'd find some people that were waiting for an interview or waiting for getting a coffee or something, and we'd just show them the latest version of the app. This would be an InVision prototype on our phone. We'd just be like, hand them our phone and show it to them. This is stuff that we haven't even built yet. The key thing, if you're doing this tactic, is to not tell them what to do. Do not tell them what to do. Just watch them play around with it. You can tell them a specific goal, like try to make a booking at Airbnb, or try to do a search with dates at Airbnb, or something like that. But do not tell them exactly how to solve each screen. Remember, if this was a real product, you wouldn't be standing there next to them to give them advice. Another good trick, when you're doing this, either when you're listening or having them or recording them, is to have them speak their mind. While they're doing it, have them describe exactly what they're thinking on each of the steps. Maybe the words that they're reading. Maybe that will give you hints of what words that they understand and which words that they don't understand. Or maybe what a specific screen means or what the purpose is. And after you've done a bunch of these interviews and then maybe MVP sessions, it's a great idea to keep these interviewees involved throughout the process. One common idea that a lot of licensing companies are using is to create a Slack instance or a WhatsApp group with their customers. Now, you want to make them feel special, right? You want to make them feel like they have exclusive active access to the future world-changing product. So think about how you're wording or how you communicate this WhatsApp group that you're adding them to. It's a great idea to keep showing them your product as they are progressing. Kind of give them this exclusive feeling that I'm the first one to see this product as it's progressing. And also, as you are reacting to things that they're saying, you can ship a new screen with a new version of the product. And that builds trust with them. They now know that you react to their feedback very fast. Finally, some of them will love connecting with other people doing the same thing as they are. They don't get to do this very often, and you are the one enabling that. If you do all these steps, you will collect the right information from your future users. You will keep them involved and that allow you to transfer the information into your first prototype and MVP. So to summarize, here's what I covered today. Why the best founders talk to the users throughout the lifetime of the company. How to find your users and how to talk to them. What questions to ask them and what not to ask them. And finally, how to turn some of those conclusions into an MVP. Thank you, everyone.